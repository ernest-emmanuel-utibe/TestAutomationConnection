# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - master

# jobs:
#   build-deploy:
#     runs-on: ubuntu-latest

#     services:
#       postgres:
#         image: postgres
#         env:
#           POSTGRES_USER: myuser
#           POSTGRES_PASSWORD: mypassword
#           POSTGRES_DB: mydb
#           POSTGRES_DB_URL: jdbc:postgresql://localhost:5432
#         ports:
#           - 5432:5432
#         options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5  

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set up environment
#         run: docker-compose -f docker-compose.yml up -d --build

#       - name: Run Unit Tests
#         run: docker exec -it my_container_name yarn test

#       - name: Build Docker Images
#         run: docker build -t my_image_name .

#       - name: Push Images to Docker Hub
#         run: docker push my_image_name

#       - name: Deploy to Dev Environment
#         run: ./deploy-dev.sh

#       - name: Connect to QA Repository
#         run: ./connect-to-qa.sh

#       - name: Run Automation Tests
#         run: ./run-automation-tests.sh

#       - name: Deploy to Systest Environment
#         run: ./deploy-systest.sh




















name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker images
        run: docker-compose -f docker-compose.yml build

      - name: Start services
        run: docker-compose -f docker-compose.yml up -d

      - name: Wait for services to be ready
        run: sleep 30

      - name: List running containers
        run: docker ps -a

      # - name: Find and Run Tests in the App Container
      #   run: |
      #     CONTAINER_ID=$(docker-compose -f docker-compose.yml ps -q app)
      #     echo "Running tests in container $CONTAINER_ID"
      #     docker exec -it $CONTAINER_ID yarn test

      - name: Push Docker images to DockerHub
        run: docker-compose -f docker-compose.yml push

      # - name: Deploy to Development Environment
      #   run: kubectl apply -f k8s/deployment-dev.yaml --context ${{ secrets.DEV_ENV }}

      # - name: Create SNS Topic
      #   run: aws sns create-topic --name ${{ secrets.SNS_TOPIC_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Connect to QA Repository
        run: |
          # Add your commands to connect to the QA repository here
          echo "Connecting to QA repository..."
          # Example command (replace with actual commands)
          git clone https://github.com/Martins-O/pythonTest-practice.git
          # cd qa-repo
          # More commands if needed

      # - name: Run Automation Tests
      #   run: |
      #     # Add your automation test commands here
      #     echo "Running automation tests..."
      #     # Example command (replace with actual commands)
      #     ./run-tests.sh
      #   continue-on-error: true
      #   id: automation-tests

      - name: Run Automation Tests
        run: |
          echo "Running automation tests..."
          # Replace with your actual automation test commands
          # Example:
          curl -sSf https://github.com/Martins-O/pythonTest-practice | bash
        continue-on-error: true
        id: automation-tests

      # - name: Deploy to System Test Environment
      #   if: steps.automation-tests.outcome == 'success'
      #   run: |
      #     # Add your commands to deploy to the system test environment here
      #     echo "Deploying to system test environment..."
      #     # Example command (replace with actual commands)
      #     kubectl apply -f k8s/deployment-systest.yaml --context ${{ secrets.SYSTEST_ENV }}

      - name: Send email on success
        if: steps.automation-tests.outcome == 'success'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "CI/CD Pipeline Succeeded"
          body: "The CI/CD pipeline has completed successfully."
          to: ${{ secrets.EMAIL_TO_SUCCESS }}
          from: ${{ secrets.EMAIL_FROM }}

      - name: Send email on failure
        if: steps.automation-tests.outcome != 'success'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "CI/CD Pipeline Failed"
          body: "The CI/CD pipeline has failed."
          to: ${{ secrets.EMAIL_TO_FAILURE }}
          from: ${{ secrets.EMAIL_FROM }}
